r"""
This file was *autogenerated* from main-moonmath.tex with sagetex.sty
version 2020/08/12 v3.5. It contains the contents of all the
sageexample environments from main-moonmath.tex. You should be able to
doctest this file with "sage -t main-moonmath_doctest.sage".

It is always safe to delete this file; it is not used in typesetting your
document.

Sage commandline, line 1632::

Sage: D = -3
Sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
Sage: r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
Sage: t = p+1-r
Sage: v_sqr = (4*p - t^2)/abs(D)
Sage: v_sqr.is_integer()
Sage: v = sqrt(v_sqr)
Sage: v.is_integer()
Sage: 4*p == t^2 + abs(D)*v^2
Sage: v

Sage commandline, line 1648::

Sage: F = GF(p)
Sage: for c2 in F:
....:     try: # quadratic residue
....:         _ = c2.nth_root(2)
....:     except ValueError: # quadratic non residue
....:         break
Sage: c2
Sage: for c3 in F:
....:     try:
....:         _ = c3.nth_root(3)
....:     except ValueError:
....:         break
Sage: c3

Sage commandline, line 1664::

Sage: C1 = EllipticCurve(F,[0,1])
Sage: C1.order() == r
Sage: C2 = EllipticCurve(F,[0,c2^3])
Sage: C2.order() == r
Sage: C3 = EllipticCurve(F,[0,c3^2])
Sage: C3.order() == r
Sage: C4 = EllipticCurve(F,[0,c3^2*c2^3])
Sage: C4.order() == r
Sage: C5 = EllipticCurve(F,[0,c3^(-2)])
Sage: C5.order() == r
Sage: C6 = EllipticCurve(F,[0,c3^(-2)*c2^3])
Sage: C6.order() == r

Sage commandline, line 1687::

Sage: b1=86844066927987146567678238756515930889952488499230423029593188005931626003754
Sage: for b2 in F:
....:     try:
....:         d = (b2/b1).nth_root(3)
....:         try:
....:             _ = d.nth_root(2)
....:             if d != 0:
....:                 break
....:         except ValueError:
....:             pass
....:     except ValueError:
....:         pass
Sage: b2

Sage commandline, line 1748::

Sage: for k in range(1,42): # Fermat's little theorem
....:     if (43^k-1)%13 == 0:
....:         break
Sage: k

Sage commandline, line 1766::

Sage: F43 = GF(43)
Sage: c2 = F43(5)
....: try: # quadratic residue
....:     c2.nth_root(2)
....: except ValueError: # quadratic non residue
....:     c2
Sage: c3 =F43(36)
....: try:
....:     c3.nth_root(3)
....: except ValueError:
....:     c3

Sage commandline, line 1782::

Sage: BLS61 = EllipticCurve(F43,[0,1])
Sage: BLS61.order() == 39
Sage: BLS62 = EllipticCurve(F43,[0,c2^3])
Sage: BLS62.order() == 39
Sage: BLS63 = EllipticCurve(F43,[0,c3^2])
Sage: BLS63.order() == 39
Sage: BLS64 = EllipticCurve(F43,[0,c3^2*c2^3])
Sage: BLS64.order() == 39
Sage: BLS65 = EllipticCurve(F43,[0,c3^(-2)])
Sage: BLS65.order() == 39
Sage: BLS66 = EllipticCurve(F43,[0,c3^(-2)*c2^3])
Sage: BLS66.order() == 39
Sage: BLS6 = BLS63 # our BLS6 curve in the book

Sage commandline, line 1825::

Sage: P = BLS6(9,2)
Sage: Q = 3*P
Sage: Q.xy()
Sage: BLS6_13 = []
Sage: for x in range(0,13): # cyclic of order 13
....:     P = x*Q
....:     BLS6_13.append(P)

Sage commandline, line 1907::

Sage: F43 = GF(43)
Sage: F43t.<t> = F43[]
Sage: p = F43t(t^6+6)
Sage: p.is_irreducible()
Sage: F43_6.<v> = GF(43^6, name='v', modulus=p)

Sage commandline, line 1919::

Sage: BLS6 = EllipticCurve (F43_6,[0 ,6]) # curve extension
Sage: INF = BLS6(0) # point at infinity
Sage: for P in INF.division_points(13): # full 13-torsion
....: # PI(P) == [q]P
....:     if P.order() == 13: # exclude point at infinity
....:         PiP = BLS6([a.frobenius() for a in P])
....:         qP = 43*P
....:         if PiP == qP:
....:             break
Sage: P.xy()

Sage commandline, line 1936::

Sage: Q = BLS6(7*v^2,16*v^3)
Sage: BLS6_13_2 = []
Sage: for x in range(0,13):
....:     P = x*Q
....:     BLS6_13_2.append(P)

Sage commandline, line 1977::

Sage: g1 = BLS6([13,15])
Sage: g2 = BLS6([7*v^2, 16*v^3])
Sage: g1.weil_pairing(g2,13)

"""
